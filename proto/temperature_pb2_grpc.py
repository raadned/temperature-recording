# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import temperature_pb2 as temperature__pb2


class TemperatureRecordingStub(object):
    """Temperature Recording Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TemperatureMeasurementRecord = channel.unary_unary(
                '/TemperatureRecording/TemperatureMeasurementRecord',
                request_serializer=temperature__pb2.TemperatureMeasurement.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureEntry.FromString,
                )
        self.TemperatureMeasurementAvg = channel.stream_unary(
                '/TemperatureRecording/TemperatureMeasurementAvg',
                request_serializer=temperature__pb2.TemperatureMeasurement.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureMeasurementStats.FromString,
                )


class TemperatureRecordingServicer(object):
    """Temperature Recording Service
    """

    def TemperatureMeasurementRecord(self, request, context):
        """create a temperature entry for a temperature measurement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TemperatureMeasurementAvg(self, request_iterator, context):
        """obtain temperature statistics given multiple entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemperatureRecordingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TemperatureMeasurementRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.TemperatureMeasurementRecord,
                    request_deserializer=temperature__pb2.TemperatureMeasurement.FromString,
                    response_serializer=temperature__pb2.TemperatureEntry.SerializeToString,
            ),
            'TemperatureMeasurementAvg': grpc.stream_unary_rpc_method_handler(
                    servicer.TemperatureMeasurementAvg,
                    request_deserializer=temperature__pb2.TemperatureMeasurement.FromString,
                    response_serializer=temperature__pb2.TemperatureMeasurementStats.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TemperatureRecording', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TemperatureRecording(object):
    """Temperature Recording Service
    """

    @staticmethod
    def TemperatureMeasurementRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TemperatureRecording/TemperatureMeasurementRecord',
            temperature__pb2.TemperatureMeasurement.SerializeToString,
            temperature__pb2.TemperatureEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TemperatureMeasurementAvg(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TemperatureRecording/TemperatureMeasurementAvg',
            temperature__pb2.TemperatureMeasurement.SerializeToString,
            temperature__pb2.TemperatureMeasurementStats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
